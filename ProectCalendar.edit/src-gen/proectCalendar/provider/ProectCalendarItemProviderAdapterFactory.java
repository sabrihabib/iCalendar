/**
 */
package proectCalendar.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import proectCalendar.util.ProectCalendarAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProectCalendarItemProviderAdapterFactory extends ProectCalendarAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProectCalendarItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Vcalendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VcalendarItemProvider vcalendarItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Vcalendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVcalendarAdapter() {
		if (vcalendarItemProvider == null) {
			vcalendarItemProvider = new VcalendarItemProvider(this);
		}

		return vcalendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Vtodo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VtodoItemProvider vtodoItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Vtodo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVtodoAdapter() {
		if (vtodoItemProvider == null) {
			vtodoItemProvider = new VtodoItemProvider(this);
		}

		return vtodoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Valarm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValarmItemProvider valarmItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Valarm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValarmAdapter() {
		if (valarmItemProvider == null) {
			valarmItemProvider = new ValarmItemProvider(this);
		}

		return valarmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Vjournal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VjournalItemProvider vjournalItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Vjournal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVjournalAdapter() {
		if (vjournalItemProvider == null) {
			vjournalItemProvider = new VjournalItemProvider(this);
		}

		return vjournalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Vevent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VeventItemProvider veventItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Vevent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVeventAdapter() {
		if (veventItemProvider == null) {
			veventItemProvider = new VeventItemProvider(this);
		}

		return veventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Vtimezone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VtimezoneItemProvider vtimezoneItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Vtimezone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVtimezoneAdapter() {
		if (vtimezoneItemProvider == null) {
			vtimezoneItemProvider = new VtimezoneItemProvider(this);
		}

		return vtimezoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Freebusy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreebusyItemProvider freebusyItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Freebusy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFreebusyAdapter() {
		if (freebusyItemProvider == null) {
			freebusyItemProvider = new FreebusyItemProvider(this);
		}

		return freebusyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Standard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardItemProvider standardItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Standard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardAdapter() {
		if (standardItemProvider == null) {
			standardItemProvider = new StandardItemProvider(this);
		}

		return standardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Daylight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DaylightItemProvider daylightItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Daylight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDaylightAdapter() {
		if (daylightItemProvider == null) {
			daylightItemProvider = new DaylightItemProvider(this);
		}

		return daylightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link proectCalendar.Instruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionItemProvider instructionItemProvider;

	/**
	 * This creates an adapter for a {@link proectCalendar.Instruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionAdapter() {
		if (instructionItemProvider == null) {
			instructionItemProvider = new InstructionItemProvider(this);
		}

		return instructionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vcalendarItemProvider != null)
			vcalendarItemProvider.dispose();
		if (vtodoItemProvider != null)
			vtodoItemProvider.dispose();
		if (valarmItemProvider != null)
			valarmItemProvider.dispose();
		if (vjournalItemProvider != null)
			vjournalItemProvider.dispose();
		if (veventItemProvider != null)
			veventItemProvider.dispose();
		if (vtimezoneItemProvider != null)
			vtimezoneItemProvider.dispose();
		if (freebusyItemProvider != null)
			freebusyItemProvider.dispose();
		if (standardItemProvider != null)
			standardItemProvider.dispose();
		if (daylightItemProvider != null)
			daylightItemProvider.dispose();
		if (instructionItemProvider != null)
			instructionItemProvider.dispose();
	}

}
